
# tarai

## prolog-playground/tarai

_the tarai algorithm serves as demonstration of the 
importance of first-argument indexing in Prolog_ .

### the tarai algorithm in C language

#### source

###### src/parts/tarai__imperativ.c 
```
#include src/parts/tarai__imperativ.c
```

### the tarai algorithm in Prolog language

#### source

###### src/parts/tarai__cut.prolog 
```
#include src/parts/tarai__cut.prolog 
```

#### demo

```
?- CALL=(tarai__cut(12,6,0,R) , R == 12) , time(CALL) .
% 28,360,939 inferences, 1.606 CPU in 1.618 seconds (99% CPU, 17663605 Lips)
CALL =  (tarai__cut(12, 6, 0, 12), 12==12),
R = 12.
```

#### performance

|=========================================
| *name*             | *time* | *percent*
| tarai__cut         |  1.606 |      100%
|=========================================

### the tarai algorithim without the cut

#### source

###### src/parts/tarai__cutless.prolog 
```
#include src/parts/tarai__cutless.prolog 
```

#### demo

```
?- CALL=(tarai__cutless(12,6,0,R) , R == 12) , time(CALL) .
Out of stack space.
```

#### performance comparison

|=========================================
| *name*             | *time* | *percent*
| tarai__cut         |  1.606 |      100%	
| tarai__cutless     |    n/a |        ∞%	
|=========================================

#### exposition

What happened ?

Why did the stack run out of space ?
The stack ran out of space because without the cut `!` 
there are many choice-points left open
whilst `tarai__cutless/4` recursively calls itself .

In the next section the code is modified to take advantage of first-argument indexing .

### the tarai algorithim with first-argument indexing , part 1 .

#### exposition

If clauses of an predicate are
mutually exclusive on the first argument then
Prolog can prune away choice-points .

Thus if our funktion can call itself with each clause
differentiated by an unique first-argument 
then perhaps the lack of open choice-points will
provide better performance .

#### source

###### src/parts/tarai__firstarg1.prolog 
```
#include src/parts/tarai__firstarg1.prolog 
```

#### demo

```
?- CALL=(tarai__firstarg1(12,6,0,R) , R == 12) , time(CALL).
% 37,814,585 inferences, 1.648 CPU in 1.659 seconds (99% CPU, 22946727 Lips)
CALL =  (tarai__firstarg1(12, 6, 0, 12), 12==12),
R = 12.
```

#### performance comparison

|=========================================
| *name*             | *time* | *percent*
| tarai__cut	     |  1.606 |      100%	
| tarai__cutless     |    n/a |        ∞%	
| tarai__firstarg1   |  1.648 |      102%	
|=========================================

### the tarai algorithim with first-argument indexing , part 2 .

#### exposition

"tail-call optimization" occurs when
the last call an funktion makes is to itself .
What is "itself" ? "itself" is any funktion with
the same name and the same arity .
What is "arity" ? "arity" means the count of how many arguments there are .

This modication means that
the last call made in the funktion is
now making the call to itself .

Prolog takes advantage of this strongly
by avoiding upon recursion the
full-blown overhead and stack allocation of an proper funktion call ;
instead performing something more like an goto .

#### source

###### src/parts/tarai__firstarg2.prolog 
```
#include src/parts/tarai__firstarg2.prolog 
```

#### demo

```
?- CALL=(tarai__firstarg2(12,6,0,R) , R == 12) , time(CALL).
% 34,663,370 inferences, 1.588 CPU in 1.602 seconds (99% CPU, 21220533 Lips)
CALL =  (tarai__firstarg2(12, 6, 0, 12), 12==12),
R = 12.
```

#### performance comparison

|=========================================
| *name*             | *time* | *percent*
| tarai__cut	     |  1.606 |      100%	
| tarai__cutless     |    n/a |        ∞%	
| tarai__firstarg1   |  1.648 |      102%	
| tarai__firstarg2   |  1.588 |       99%	
|=========================================

### the tarai algorithim with first-argument indexing , part 3 .

In `tarai__firstarg2` performance gains were obtained by
taking advantage of tail-call optimization .

In `tarai_firstarg3` it is demonstrated that optimization occurs for
every call from an funktion to itself .

#### source

###### src/parts/tarai__firstarg3.prolog 
```
#include src/parts/tarai__firstarg3.prolog 
```

#### demo

```
?- CALL=(tarai__firstarg3(12,6,0,R) , R == 12) , time(CALL).
% 25,209,725 inferences, 1.459 CPU in 1.471 seconds (99% CPU, 17274493 Lips)
CALL =  (tarai__firstarg3(12, 6, 0, 12), 12==12),
R = 12.
```

#### performance comparison

|==========================================
| *name*             | *time* | *percent*
| tarai__cut         |  1.606 |      100%
| tarai__cutless     |    n/a |        ∞%
| tarai__firstarg1   |  1.648 |      102%
| tarai__firstarg2   |  1.588 |       99%
| tarai__firstarg3   |  1.459 |      *91%*
|==========================================


## appendix

### authorship

* .
** (c) kintalken@gmail.com 2020-10-22 .

* tarai__imperativ
* tarai__cut
** (c) j4nBurse
